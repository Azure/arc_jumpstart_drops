resources
| where type == "microsoft.azurearcdata/sqlserverinstances" or type == "microsoft.sqlvirtualmachine/sqlvirtualmachines"
| extend FullInstanceName = case(
    type == "microsoft.azurearcdata/sqlserverinstances", properties.containerResourceId,
    type == "microsoft.sqlvirtualmachine/sqlvirtualmachines", properties.virtualMachineResourceId,
    "Unknown"
)
| join kind=leftouter (
    resources
    | project id, vmSize = properties.hardwareProfile.vmSize
) on $left.FullInstanceName == $right.id
| extend LogicalCores = case(
    type == "microsoft.azurearcdata/sqlserverinstances", tostring(properties.vCore),
    type == "microsoft.sqlvirtualmachine/sqlvirtualmachines", tostring(toint(extract(@"(\d+)", 1, tostring(vmSize)))),
    "Unknown"
)
| project InstanceID = id, Name = name, ResourceType = type, resourceLocation = location, CloudType = case(
    type == "microsoft.azurearcdata/sqlserverinstances", "On Prem",
    type == "microsoft.sqlvirtualmachine/sqlvirtualmachines", "In Azure",
    "Unknown"
), ProvisioningState = properties.provisioningState, LastHeartbeatHrs = datetime_diff('hour', now(), todatetime(properties.lastInventoryUploadTime)), sqlVersion = case(
    type == "microsoft.azurearcdata/sqlserverinstances", properties.version,
    type == "microsoft.sqlvirtualmachine/sqlvirtualmachines", strcat("SQL Server ", substring(properties.sqlImageOffer, 3, 4)),
    "Unknown"
), sqlEdition = case(
    type == "microsoft.azurearcdata/sqlserverinstances", properties.edition,
    type == "microsoft.sqlvirtualmachine/sqlvirtualmachines", properties.sqlImageSku,
    "Unknown"
), ServerID = FullInstanceName, 
    Collation = case(
    type == "microsoft.azurearcdata/sqlserverinstances", properties.collation,
    "Unknown"
), Clustered = case(
    type == "microsoft.azurearcdata/sqlserverinstances", iff(isnull(properties.failoverCluster), "No", properties.failoverCluster),
    "Unknown"
), AVG = case(
    type == "microsoft.azurearcdata/sqlserverinstances", iff(isnull(properties.alwaysOnRole == "None"), "No", properties.alwaysOnRole),
    "Unknown"
), BackupPolicy = case(
    type == "microsoft.azurearcdata/sqlserverinstances", iff(isnull(properties.backupPolicy), "No", properties.backupPolicy),
    "Unknown"
), sqlVersionNumber = case(
    type == "microsoft.azurearcdata/sqlserverinstances", properties.currentVersion,
    "Unknown"
), sqlPatchNumber = case(
    type == "microsoft.azurearcdata/sqlserverinstances", properties.patchLevel,
    "Unknown"
), ServiceType = case(
    type == "microsoft.azurearcdata/sqlserverinstances", properties.serviceType,
    "Engine"
), sqlCores= LogicalCores