name: Build Drops Filter

on:
  workflow_run:
    workflows: ["Build Drops JSON"]
    types:
      - completed
  push:
    paths:
      - 'drops/**'
      - '.github/workflows/build-drops-filter.yaml'
  pull_request:
    paths:
      - 'drops/**'
      - '.github/workflows/build-drops-filter.yaml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-drops-filter:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Create autogenerated directory
      run: |
        mkdir -p autogenerated
        echo "Created autogenerated directory"

    - name: Build drops filter JSON
      run: |
        echo "Building dropsFilter.json from drops data..."
        
        # Create a Node.js script to build the filter structure
        cat << 'EOF' > build-filter.js
        const fs = require('fs');
        const path = require('path');
        
        console.log('Processing drops for filter generation...');
        
        // Read all JSON files from drops directory
        const dropsDir = 'drops';
        const files = fs.readdirSync(dropsDir).filter(file => file.endsWith('.json'));
        
        console.log(`Found ${files.length} drop files`);
        
        // Collections to track unique values
        const products = new Set();
        const programmingLanguages = new Set();
        const difficulties = new Set();
        const types = new Set();
        const topics = new Set();
        
        // Process each drop file
        files.forEach(file => {
          const filePath = path.join(dropsDir, file);
          
          try {
            const content = fs.readFileSync(filePath, 'utf8');
            const drop = JSON.parse(content);
            
            // Extract Products
            if (drop.Products && Array.isArray(drop.Products)) {
              drop.Products.forEach(product => products.add(product));
            }
            
            // Extract Programming Languages
            if (drop.ProgrammingLanguage && Array.isArray(drop.ProgrammingLanguage)) {
              drop.ProgrammingLanguage.forEach(lang => programmingLanguages.add(lang));
            }
            
            // Extract Difficulty
            if (drop.Difficulty) {
              difficulties.add(drop.Difficulty);
            }
            
            // Extract Type
            if (drop.Type) {
              types.add(drop.Type);
            }
            
            // Extract Topics
            if (drop.Topics && Array.isArray(drop.Topics)) {
              drop.Topics.forEach(topic => topics.add(topic));
            }
            
          } catch (error) {
            console.log(`⚠️  Warning: ${file} - ${error.message}`);
          }
        });
        
        // Create filter structure
        const dropsFilter = [
          {
            name: "Products",
            type: "Products",
            description: "Tags related to Azure products like Azure Arc and Azure Local.",
            tags: Array.from(products).sort().map(product => ({
              name: product,
              aliases: [product],
              description: `${product} related content and solutions.`
            }))
          },
          {
            name: "Language",
            type: "ProgrammingLanguage",
            description: "Tags related to programming languages like PowerShell, .Net, Python, and Java.",
            tags: Array.from(programmingLanguages).sort().map(lang => ({
              name: lang,
              aliases: [],
              description: `Content related to ${lang} programming language.`
            }))
          },
          {
            name: "Difficulty",
            type: "Difficulty",
            description: "Tags related to difficulty levels.",
            tags: Array.from(difficulties).sort().map(difficulty => ({
              name: difficulty,
              aliases: [difficulty],
              description: `${difficulty}-level content.`
            }))
          },
          {
            name: "Last Updated",
            type: "LastUpdated",
            description: "Tags indicating when the content was last updated.",
            tags: [
              {
                name: "< 6 months",
                aliases: ["< 6 months"],
                description: "Updated within the last 6 months."
              },
              {
                name: "6 months - 12 months",
                aliases: [],
                description: "Updated between 6 months and 12 months ago."
              },
              {
                name: "> 12 months",
                aliases: [],
                description: "Updated more than 12 months ago."
              }
            ]
          },
          {
            name: "Topics", 
            type: "Topics",
            description: "Tags related to technology topics.",
            tags: Array.from(topics).sort().map(topic => ({
              name: topic,
              aliases: [],
              description: `Technologies and concepts related to ${topic}.`
            }))
          },
          {
            name: "Type",
            type: "Type",
            description: "Tags related to the type of drops.",
            tags: Array.from(types).sort().map(type => {
              const typeMap = {
                "ui_dashboard_workbook": "UI/Dashboard/Workbook",
                "sample_app": "Sample App",
                "library_package": "Library/Package", 
                "script_automation": "Script/Automation",
                "template": "Template",
                "tutorial_guide": "Tutorial/Guide"
              };
              
              return {
                name: typeMap[type] || type,
                value: type,
                aliases: [],
                description: `${typeMap[type] || type} content type.`
              };
            })
          }
        ];
        
        // Write filter JSON
        try {
          fs.writeFileSync('autogenerated/dropsFilter.json', JSON.stringify(dropsFilter, null, 2));
          console.log(`Successfully created autogenerated/dropsFilter.json`);
          console.log(`Filter Statistics:`);
          console.log(`   Products: ${products.size}`);
          console.log(`   Programming Languages: ${programmingLanguages.size}`);
          console.log(`   Difficulties: ${difficulties.size}`);
          console.log(`   Types: ${types.size}`);
          console.log(`   Topics: ${topics.size}`);
        } catch (error) {
          console.error(`Failed to write filter file: ${error.message}`);
          process.exit(1);
        }
        EOF
        
        # Run the Node.js script
        node build-filter.js

    - name: Validate filter JSON structure
      run: |
        echo "Validating filter JSON structure..."
        
        # Create validation script
        cat << 'EOF' > validate-filter.js
        const fs = require('fs');
        
        try {
          const content = fs.readFileSync('autogenerated/dropsFilter.json', 'utf8');
          const data = JSON.parse(content);
          
          console.log('Generated filter JSON is syntactically valid');
          
          if (Array.isArray(data)) {
            console.log('Filter JSON is properly formatted as an array');
            
            // Validate structure
            let hasValidStructure = true;
            data.forEach((category, index) => {
              if (!category.name || !category.type || !Array.isArray(category.tags)) {
                console.log(`Category ${index} missing required fields`);
                hasValidStructure = false;
              }
            });
            
            if (hasValidStructure) {
              console.log('Filter structure is valid');
              process.exit(0);
            } else {
              console.log('Filter structure is invalid');
              process.exit(1);
            }
          } else {
            console.log('Filter JSON is not formatted as an array');
            process.exit(1);
          }
        } catch (error) {
          console.log('Generated filter JSON is invalid');
          console.log(`Error: ${error.message}`);
          process.exit(1);
        }
        EOF
        
        node validate-filter.js

    - name: Display filter file info
      run: |
        echo "Filter File Statistics:"
        echo "=========================="
        echo "Generated file: autogenerated/dropsFilter.json"
        echo "File size: $(wc -c < autogenerated/dropsFilter.json | numfmt --to=iec-i --suffix=B)"
        
        # Create stats script
        cat << 'EOF' > filter-stats.js
        const fs = require('fs');
        
        try {
          const content = fs.readFileSync('autogenerated/dropsFilter.json', 'utf8');
          const data = JSON.parse(content);
          
          console.log(`Number of filter categories: ${data.length}`);
          console.log('');
          console.log('Filter categories:');
          
          data.forEach(category => {
            const tagCount = category.tags ? category.tags.length : 0;
            console.log(`- ${category.name}: ${tagCount} tags`);
          });
          
        } catch (error) {
          console.log('Error reading filter data');
        }
        EOF
        
        node filter-stats.js

    - name: Check for changes and commit
      if: github.event_name == 'push' || github.event_name == 'workflow_run'
      run: |
        echo "Checking for changes in autogenerated folder..."
        
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are changes
        if [ -n "$(git status --porcelain autogenerated/dropsFilter.json)" ]; then
          echo "Changes detected in autogenerated/dropsFilter.json"
          
          # Add and commit the changes
          git add autogenerated/dropsFilter.json
          
          # Get filter categories count
          CATEGORIES_COUNT=$(node -e "const fs = require('fs'); const data = JSON.parse(fs.readFileSync('autogenerated/dropsFilter.json', 'utf8')); console.log(data.length);")
          
          git commit -m "Auto-update dropsFilter.json from drops data

          - Updated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - Filter categories: $CATEGORIES_COUNT
          - Triggered by: ${{ github.event_name }}

          [skip ci]"
          
          # Push the changes
          git push
          echo "Successfully committed and pushed updated dropsFilter.json"
        else
          echo "No changes detected in autogenerated/dropsFilter.json"
        fi

    - name: Summary
      run: |
        echo ""
        echo "🎉 Filter Workflow Summary"
        echo "=========================="
        echo "Successfully built autogenerated/dropsFilter.json"
        echo "Source: drops/ folder data"
        echo "Output: autogenerated/dropsFilter.json"
        
        TOTAL_CATEGORIES=$(node -e "const fs = require('fs'); const data = JSON.parse(fs.readFileSync('autogenerated/dropsFilter.json', 'utf8')); console.log(data.length);")
        echo "Total filter categories: $TOTAL_CATEGORIES"
        echo "Trigger: ${{ github.event_name }}"
